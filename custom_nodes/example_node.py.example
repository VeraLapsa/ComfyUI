class Example:
    """
    A example node

    Class methods
    -------------
    INPUT_TYPES (dict):
        Tell the main program input parameters of nodes.

    Attributes
    ----------
    RETURN_TYPES (`tuple`|| tuple[dict[str, Any]]):
        The type of each element in the output tulple.
        tuple[dict[str, Any]] has to have at minium {'type': `str`}
        For Example:
            RETURN_TYPES = ({"type": "MODEL", "label": "Model Out", "extra_info": {"shape": "GRID_SHAPE"}},)
        "Shapes":
            GRID_SHAPE, BOX_SHAPE, ARROW_SHAPE, CIRCLE_SHAPE(default)
    RETURN_NAMES (`tuple`):
        Optional: The name of each output in the output tulple.
    FUNCTION (`str`):
        The name of the entry-point method. For example, if `FUNCTION = "execute"` then it will run Example().execute()
    OUTPUT_NODE ([`bool`]):
        If this node is an output node that outputs a result/image from the graph. The SaveImage node is an example.
        The backend iterates on these output nodes and tries to execute all their parents if their parent graph is properly connected.
        Assumed to be False if not present.
    CATEGORY (`str`):
        The category the node should appear in the UI. '/'s add a submenu
    TITLE (`str`):
        The title of the node. optional, defaults to the key your class set in NODE_CLASS_MAPPINGS
    EXTRA_PROPERTIES (dict[`str`, Any]):
        default properties like if it's a horizontal node or the min Height/Width when adding the node to the graph
        For Example:
            EXTRA_PROPERTIES = {
                "horizontal": True,
                "minHeight": 300,
                "minWidth": 300
            }
            Would make a square node with it's inputs on the to and outputs on the bottom
    DESCRIPTION (`str`):
        Not used in the UI atm. Looking to add it as a tool tip in the future.
    execute(s) -> tuple || None:
        The entry point method. The name of this method must be the same as the value of property `FUNCTION`.
        For example, if `FUNCTION = "execute"` then this method's name must be `execute`, if `FUNCTION = "foo"` then it must be `foo`.
    """
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(s):
        """
            Return a dictionary which contains config for all input fields.
            Some types (string): "MODEL", "VAE", "CLIP", "CONDITIONING", "LATENT", "IMAGE", "INT", "STRING", "FLOAT".
            Input types "INT", "STRING" or "FLOAT" are special values for fields on the node.
            The type can be a list for selection.

            Returns: `dict`:
                - Key input_fields_group (`string`): Can be either required, hidden or optional.
                    The default shape of an optional input is BOX_SHAPE as compared to the default circle for required inputs.
                    Optional Inputs are added to the end of the "execute" function's arguments.
                    A node class must have property `required`
                - Value input_fields (`dict`): Contains input fields config:
                    * Key field_name (`string`): Name of a entry-point method's argument
                    * Value field_config (`tuple`):
                        + First value is a string indicate the type of field or a list for selection.
                        + Secound value is a config for type "INT", "STRING" or "FLOAT".
        """
        return {
            "required": {
                "image": ("IMAGE",),
                "int_field": ("INT", {
                    "default": 0,
                    "min": 0, #Minimum value
                    "max": 4096, #Maximum value
                    "step": 64 #Slider's step
                }),
                "float_field": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}),
                "print_to_screen": (["enable", "disable"],),
                "string_field": ("STRING", {
                    "multiline": False, #True if you want the field to look like the one on the ClipTextEncode node
                    "default": "Hello World!"
                }),
            },
            "optional": {
                "int_field_ovrd": ("INT", {
                    "label": "int_field Override"
                }),
            },
        }

    RETURN_TYPES = ("IMAGE",)
    #RETURN_NAMES = ("image_output_name",)

    FUNCTION = "test"

    #OUTPUT_NODE = False

    TITLE = "Example Node"
    CATEGORY = "Example"

    def test(self, image, string_field, int_field, float_field, print_to_screen, int_field_ovrd=None):
        if(int_field_ovrd is not None):
            # Do something with the optional input
        if print_to_screen == "enable":
            print(f"""Your input contains:
                string_field aka input text: {string_field}
                int_field: {int_field}
                float_field: {float_field}
            """)
        #do some processing on the image, in this example I just invert it
        image = 1.0 - image
        return (image,)


# A dictionary that contains all nodes you want to export with their names
# NOTE: names should be globally unique
NODE_CLASS_MAPPINGS = {
    "Example": Example
}
